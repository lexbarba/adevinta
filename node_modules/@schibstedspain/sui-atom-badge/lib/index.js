'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atomBadgeSizes = exports.atomBadgeTypes = undefined;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_LABEL_LENGTH = 100;
var TRANSPARENT = 'transparent';
var SIZES = {
  LARGE: 'large',
  SMALL: 'small'
};

var TYPES = {
  SUCCESS: 'success',
  ERROR: 'error',
  INFO: 'info',
  ALERT: 'alert'

  /**
   * Cuts off exceeded char limit
   * @param  {string} label
   * @return {string}
   */
};var truncateText = function truncateText(label) {
  return label.length < MAX_LABEL_LENGTH ? label : label.substr(0, MAX_LABEL_LENGTH);
};

/**
 * @param  {string} options.className
 * @param  {string} options.size
 * @param  {boolean} options.transparent
 * @param  {string} options.type
 * @return {string}
 */
var getClassNames = function getClassNames(_ref) {
  var className = _ref.className,
      size = _ref.size,
      transparent = _ref.transparent,
      type = _ref.type;

  var transparentClass = transparent && '--' + TRANSPARENT || '';

  return (0, _classnames2.default)('sui-AtomBadge', 'sui-AtomBadge-' + size, 'sui-AtomBadge-' + type + transparentClass, className);
};

/**
 * Small badges with background can't have icon
 * @param  {Object} options.icon
 * @param  {string} options.size
 * @param  {boolean} options.transparent
 * @return {boolean}
 */
var shouldRenderIcon = function shouldRenderIcon(_ref2) {
  var icon = _ref2.icon,
      size = _ref2.size,
      transparent = _ref2.transparent;

  return icon && (size !== SIZES.SMALL || transparent);
};

var AtomBadge = function AtomBadge(props) {
  var label = truncateText(props.label);
  var classNames = getClassNames((0, _extends3.default)({}, props));

  return _react2.default.createElement(
    'div',
    { className: classNames },
    shouldRenderIcon(props) && _react2.default.createElement(
      'span',
      { className: 'sui-AtomBadge-icon' },
      props.icon
    ),
    _react2.default.createElement(
      'span',
      { className: 'sui-AtomBadge-text', title: label },
      label
    )
  );
};

AtomBadge.displayName = 'AtomBadge';

AtomBadge.propTypes = process.env.NODE_ENV !== "production" ? process.env.NODE_ENV !== "production" ? {
  /**
   * CSS Classes to be added to the component
   */
  className: _propTypes2.default.string,
  /**
   * Badge text to be shown
   */
  label: _propTypes2.default.string.isRequired,
  /**
   * Custom svg icon to be shown
   */
  icon: _propTypes2.default.node,
  /**
   * Whether show a background color
   */
  transparent: _propTypes2.default.bool,
  size: _propTypes2.default.oneOf((0, _values2.default)(SIZES)),
  type: _propTypes2.default.oneOf((0, _values2.default)(TYPES))
} : {} : {};

AtomBadge.defaultProps = {
  size: SIZES.SMALL,
  type: TYPES.SUCCESS
};

exports.default = AtomBadge;
exports.atomBadgeTypes = TYPES;
exports.atomBadgeSizes = SIZES;