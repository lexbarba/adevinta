import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

var Circle =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Circle, _Component);

  function Circle() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      currentPercentage: _this.props.percentage,
      transitionTime: 0
    };
    return _this;
  }

  Circle.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (Math.abs(props.percentage - state.currentPercentage) < 5) {
      return {
        currentPercentage: props.percentage,
        transitionTime: 0
      };
    }

    return {
      currentPercentage: props.percentage,
      transitionTime: Circle.MAX_TRANSITION_TIME_IN_MS * props.percentage / 100 / 1000
    };
  };

  var _proto = Circle.prototype;

  _proto.getPathStyles = function getPathStyles(percentage, strokeWidth) {
    var transitionTime = this.state.transitionTime;
    var withAnimation = this.props.withAnimation;
    var radius = 50 - strokeWidth / 2;
    var d = "M 50,50 m 0,-" + radius + "\n     a " + radius + "," + radius + " 0 1 1 0," + 2 * radius + "\n     a " + radius + "," + radius + " 0 1 1 0,-" + 2 * radius;
    var len = Math.PI * 2 * radius;
    var style = {
      strokeDasharray: len + "px " + len + "px",
      strokeDashoffset: (100 - percentage) / 100 * len + "px",
      transition: withAnimation ? "stroke-dashoffset " + transitionTime + "s ease 0s, stroke " + transitionTime + "s ease" : ''
    };
    return {
      d: d,
      style: style
    };
  };

  _proto.getStokeList = function getStokeList() {
    var _cx;

    var _this$props = this.props,
        baseClassName = _this$props.baseClassName,
        modifier = _this$props.modifier,
        percentage = _this$props.percentage,
        strokeWidth = _this$props.strokeWidth;

    var _this$getPathStyles = this.getPathStyles(percentage, strokeWidth),
        pathString = _this$getPathStyles.pathString,
        pathStyle = _this$getPathStyles.pathStyle;

    return React.createElement("path", {
      className: cx(baseClassName + "-path", (_cx = {}, _cx[baseClassName + "-path--" + modifier] = !!modifier, _cx)),
      d: pathString,
      strokeLinecap: "square",
      strokeWidth: strokeWidth,
      fillOpacity: "0",
      style: pathStyle
    });
  };

  _proto.render = function render() {
    var _cx2, _cx3, _cx4;

    var _this$props2 = this.props,
        baseClassName = _this$props2.baseClassName,
        modifier = _this$props2.modifier,
        percentage = _this$props2.percentage,
        strokeWidth = _this$props2.strokeWidth,
        size = _this$props2.size;
    return React.createElement("svg", {
      className: cx(baseClassName + "-circle", (_cx2 = {}, _cx2[baseClassName + "-circle--" + modifier] = !!modifier, _cx2[baseClassName + "-circle--" + size] = !!size, _cx2)),
      viewBox: "0 0 100 100"
    }, React.createElement("path", Object.assign({
      className: cx(baseClassName + "-trail", (_cx3 = {}, _cx3[baseClassName + "-trail--" + modifier] = !!modifier, _cx3))
    }, this.getPathStyles(100, strokeWidth), {
      strokeWidth: strokeWidth,
      fillOpacity: "0"
    })), React.createElement("path", Object.assign({
      className: cx(baseClassName + "-path", (_cx4 = {}, _cx4[baseClassName + "-path--" + modifier] = !!modifier, _cx4))
    }, this.getPathStyles(percentage, strokeWidth), {
      strokeLinecap: "square",
      strokeWidth: strokeWidth,
      fillOpacity: "0"
    })));
  };

  return Circle;
}(Component);

Circle.MAX_TRANSITION_TIME_IN_MS = 1250;
Circle.defaultProps = {
  withAnimation: true
};
export default Circle;